{"paragraphs":[{"text":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.mllib.recommendation.{MatrixFactorizationModel, ALS, Rating}\nimport org.apache.spark.sql.SQLContext","authenticationInfo":{},"dateUpdated":"May 8, 2016 5:58:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462680441632_515310860","id":"20160508-130721_333258516","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.mllib.recommendation.{MatrixFactorizationModel, ALS, Rating}\nimport org.apache.spark.sql.SQLContext\n"},"dateCreated":"May 8, 2016 1:07:21 PM","dateStarted":"May 8, 2016 5:58:49 PM","dateFinished":"May 8, 2016 5:59:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3682","focus":true},{"text":"val sqlContext = new SQLContext(sc)\nval df = sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .load(\"../SparkCFStudy/resources/RCdata/rating_final.csv\")","authenticationInfo":{},"dateUpdated":"May 8, 2016 5:59:22 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462681737325_1594000636","id":"20160508-132857_660130688","dateCreated":"May 8, 2016 1:28:57 PM","dateStarted":"May 8, 2016 5:59:22 PM","dateFinished":"May 8, 2016 5:59:25 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3683","result":{"code":"SUCCESS","type":"TEXT","msg":"sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@5dd4ba12\ndf: org.apache.spark.sql.DataFrame = [userID: string, placeID: int, rating: int, food_rating: int, service_rating: int]\n"},"focus":true},{"text":"val ratings = df.select(\"userID\", \"placeID\", \"rating\").rdd.map { row =>\n    Rating(row.getString(0).tail.toInt, row.getInt(1), row.getInt(2).toDouble)\n  }\nval splitedRatings = ratings.randomSplit(Array(0.9, 0.1), 12345)\nval trainRatings = splitedRatings(0)\nval targetRatings = splitedRatings(1)","authenticationInfo":{},"dateUpdated":"May 8, 2016 5:59:31 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462681767413_58513748","id":"20160508-132927_241440585","dateCreated":"May 8, 2016 1:29:27 PM","dateStarted":"May 8, 2016 5:59:31 PM","dateFinished":"May 8, 2016 5:59:33 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3684","result":{"code":"SUCCESS","type":"TEXT","msg":"ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[11] at map at <console>:36\nsplitedRatings: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating]] = Array(MapPartitionsRDD[12] at randomSplit at <console>:38, MapPartitionsRDD[13] at randomSplit at <console>:38)\ntrainRatings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[12] at randomSplit at <console>:38\ntargetRatings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[13] at randomSplit at <console>:38\n"},"focus":true},{"text":"// Build the recommendation model using ALS\nval rank = 10\nval numIterations = 10\nval model = ALS.train(trainRatings, rank, numIterations, 0.01, -1, 123456)","authenticationInfo":{},"dateUpdated":"May 8, 2016 5:59:41 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462681797724_-1699926643","id":"20160508-132957_1481201521","dateCreated":"May 8, 2016 1:29:57 PM","dateStarted":"May 8, 2016 5:59:41 PM","dateFinished":"May 8, 2016 5:59:44 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3685","result":{"code":"SUCCESS","type":"TEXT","msg":"rank: Int = 10\nnumIterations: Int = 10\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@53ff2dd7\n"},"focus":true},{"text":"// Evaluate the model on rating data\nval usersProducts = targetRatings.map { case Rating(user, product, rate) =>\n  (user, product)\n}\nval predictions =\n  model.predict(usersProducts).map { case Rating(user, product, rate) =>\n    ((user, product), rate)\n  }\nval ratesAndPreds = targetRatings.map { case Rating(user, product, rate) =>\n  ((user, product), rate)\n}.join(predictions)\nval MSE = ratesAndPreds.map { case ((user, product), (r1, r2)) =>\n  val err = (r1 - r2)\n  err * err\n}.mean()","authenticationInfo":{},"dateUpdated":"May 8, 2016 5:59:51 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462681824362_-1793774726","id":"20160508-133024_187944858","dateCreated":"May 8, 2016 1:30:24 PM","dateStarted":"May 8, 2016 5:59:51 PM","dateFinished":"May 8, 2016 5:59:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3686","result":{"code":"SUCCESS","type":"TEXT","msg":"usersProducts: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[221] at map at <console>:43\npredictions: org.apache.spark.rdd.RDD[((Int, Int), Double)] = MapPartitionsRDD[230] at map at <console>:53\nratesAndPreds: org.apache.spark.rdd.RDD[((Int, Int), (Double, Double))] = MapPartitionsRDD[234] at join at <console>:56\nMSE: Double = 0.9076561191871908\n"},"focus":true},{"text":"println(\"%table Mean Squared Error = \" + MSE)","authenticationInfo":{},"dateUpdated":"May 8, 2016 6:00:03 PM","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"Mean Squared Error = 0.9076561191871908","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"Mean Squared Error = 0.9076561191871908","index":0,"aggr":"sum"}}},"enabled":true,"tableHide":false,"editorHide":false,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462681889050_-1813104117","id":"20160508-133129_2018389814","dateCreated":"May 8, 2016 1:31:29 PM","dateStarted":"May 8, 2016 5:59:58 PM","dateFinished":"May 8, 2016 5:59:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3687","result":{"code":"SUCCESS","type":"TABLE","msg":"Mean Squared Error = 0.9076561191871908\n","comment":"","msgTable":[],"columnNames":[{"name":"Mean Squared Error = 0.9076561191871908","index":0,"aggr":"sum"}],"rows":[]},"focus":true},{"authenticationInfo":{},"dateUpdated":"May 8, 2016 1:45:07 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462682679246_764647284","id":"20160508-134439_144640056","dateCreated":"May 8, 2016 1:44:39 PM","dateStarted":"May 8, 2016 1:45:07 PM","dateFinished":"May 8, 2016 1:45:07 PM","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3689"}],"name":"CFSample","id":"2BKW145W2","angularObjects":{"2BM833KWS:shared_process":[],"2BJCMQXMW:shared_process":[],"2BJK1Q3H6:shared_process":[],"2BK4PJ94T:shared_process":[],"2BHQPQ5KH:shared_process":[],"2BJBB27YP:shared_process":[],"2BJMRWK2V:shared_process":[],"2BJUCVQ1Q:shared_process":[],"2BKZ9XBR9:shared_process":[],"2BMVVHFC7:shared_process":[],"2BKPF44H7:shared_process":[],"2BJ5DEJR5:shared_process":[],"2BH96DPE5:shared_process":[],"2BHF4ZH46:shared_process":[],"2BKVZHY6D:shared_process":[],"2BJDUNAWJ:shared_process":[],"2BJXNM5CZ:shared_process":[],"2BK2QC2W4:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}